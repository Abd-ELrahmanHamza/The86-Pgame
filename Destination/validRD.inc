;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Written by : - Abdelrahman Hamza and Ziad Sherif  13-12-2021                        ;;;;;
; parameters : -                                                                      ;;;;;
;   Destination string that you want to check                                         ;;;;;
;   Array of registers Names : -                                                      ;;;;;
;    'ax','bx','cx','dx','si','di','bp','sp','ah','al','bh','bl','ch','cl','dh','dl'  ;;;;;
;   registersOffsets => Marco handel its values we need it only to have 16 words      ;;;;;
;   destination the memory that you will recieve your result offset in it             ;;;;;
;   flag 1 => means not valid regardless value of destination                         ;;;;;
;   typeOfDestination => 1h means memory , 0h => means register                       ;;;;;
;A macro that fills registersOffsets array with offsets of registers array            ;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
validateRegisterDirect MACRO Names,offsets,regName,destination,flag                      ;;
                                                                                         ;;
    mov dx,word ptr regName                                                              ;;
                                                                                         ;;
    validateRegister Names,registersOffsets,dx,destination,flag1112                      ;;
                                                                                         ;;
    mov bx,word ptr regName                                                              ;;
                                                                                         ;;
    mov ax, 'xb'                                                                         ;;
    ; if regName == 'BX'                                                                 ;;
    cmp ax, bx                                                                           ;;
        jz foundRD                                                                       ;;
                                                                                         ;;
    mov ax, 'is'                                                                         ;;
    ; if regName == 'SI'                                                                 ;;
    cmp ax, bx                                                                           ;;
        jz foundRD                                                                       ;;
                                                                                         ;;
    mov ax, 'id'                                                                         ;;
    ; if regName == 'DI'                                                                 ;;
    cmp ax, bx                                                                           ;;
        jz foundRD                                                                       ;;
                                                                                         ;;
    jmp notFoundRD                                                                       ;;
    ; if valid register dircet mode [BX],[SI],[DI]                                       ;;
    foundRD:                                                                             ;;
        mov di,destination                                                               ;;
        mov bx,[di]                                                                      ;;
        mov di,offset destination                                                        ;;
        mov [di],bx                                                                      ;;
        jmp done                                                                         ;;
    notFoundRD:                                                                          ;;
        mov flag1112,01h                                                                 ;;
    done:                                                                                ;;
ENDM                                                                                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;